'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2379
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.2379.
'
Namespace InfiniPayPal
    
    '<remarks/>
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="InfiniPayPalWebServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Public Class InfiniPayPalWebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        '<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://paypalgate.infinishops.com/InfiniPayPalWebService.asmx"
        End Sub
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MakeTransaction", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MakeTransaction(ByVal paypaID As String, ByVal paypalPassword As String, ByVal Envoirement As String, ByVal cardNumber As String, ByVal cardType As Integer, ByVal CVV2 As String, ByVal endMonth As String, ByVal endYear As String, ByVal totalAmount As String, ByVal moneyType As String, ByVal invoiceID As String, ByRef code As String, ByRef msg As String) As String
            Dim results() As Object = Me.Invoke("MakeTransaction", New Object() {paypaID, paypalPassword, Envoirement, cardNumber, cardType, CVV2, endMonth, endYear, totalAmount, moneyType, invoiceID, code, msg})
            code = CType(results(1),String)
            msg = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        Public Function BeginMakeTransaction(ByVal paypaID As String, ByVal paypalPassword As String, ByVal Envoirement As String, ByVal cardNumber As String, ByVal cardType As Integer, ByVal CVV2 As String, ByVal endMonth As String, ByVal endYear As String, ByVal totalAmount As String, ByVal moneyType As String, ByVal invoiceID As String, ByVal code As String, ByVal msg As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("MakeTransaction", New Object() {paypaID, paypalPassword, Envoirement, cardNumber, cardType, CVV2, endMonth, endYear, totalAmount, moneyType, invoiceID, code, msg}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndMakeTransaction(ByVal asyncResult As System.IAsyncResult, ByRef code As String, ByRef msg As String) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            code = CType(results(1),String)
            msg = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InstallCertificate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InstallCertificate(ByVal MIDentity As String, ByVal password As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Certificate() As Byte) As String
            Dim results() As Object = Me.Invoke("InstallCertificate", New Object() {MIDentity, password, Certificate})
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        Public Function BeginInstallCertificate(ByVal MIDentity As String, ByVal password As String, ByVal Certificate() As Byte, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("InstallCertificate", New Object() {MIDentity, password, Certificate}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndInstallCertificate(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsCertificatInstalled", RequestElementName:="IsCertificatInstalled", RequestNamespace:="http://tempuri.org/", ResponseElementName:="IsCertificatInstalledResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ISCertInstalled(ByVal paypaID As String, ByVal paypalPassword As String, ByVal Envoirement As String) As <System.Xml.Serialization.XmlElementAttribute("IsCertificatInstalledResult")> Integer
            Dim results() As Object = Me.Invoke("ISCertInstalled", New Object() {paypaID, paypalPassword, Envoirement})
            Return CType(results(0),Integer)
        End Function
        
        '<remarks/>
        Public Function BeginISCertInstalled(ByVal paypaID As String, ByVal paypalPassword As String, ByVal Envoirement As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ISCertInstalled", New Object() {paypaID, paypalPassword, Envoirement}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndISCertInstalled(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
    End Class
End Namespace
