'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
'
Namespace com.infinilogic.gatewayrefund
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CXLRefundServiceSoap", [Namespace]:="http://tempuri.org/CXL/Service1")>  _
    Partial Public Class CXLRefundService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private CXLProcessingRefundOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CXLProcessingRefund1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private IfCXLLiveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.RefundRobot.My.MySettings.Default.RefundRobot_2005_com_infinilogic_gatewayrefund_CXLRefundService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CXLProcessingRefundCompleted As CXLProcessingRefundCompletedEventHandler
        
        '''<remarks/>
        Public Event CXLProcessingRefund1Completed As CXLProcessingRefund1CompletedEventHandler
        
        '''<remarks/>
        Public Event IfCXLLiveCompleted As IfCXLLiveCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CXL/Service1/CXLProcessingRefundUpgrade", RequestElementName:="CXLProcessingRefundUpgrade", RequestNamespace:="http://tempuri.org/CXL/Service1", ResponseElementName:="CXLProcessingRefundUpgradeResponse", ResponseNamespace:="http://tempuri.org/CXL/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function CXLProcessingRefund( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByRef CXLResponseCode As String,  _
                    ByRef CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal ridAgainstInvoice As Long,  _
                    ByVal empCode As String,  _
                    ByVal cardName As String) As <System.Xml.Serialization.XmlElementAttribute("CXLProcessingRefundUpgradeResult")> Object
            Dim results() As Object = Me.Invoke("CXLProcessingRefund", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, hn, zp, ridAgainstInvoice, empCode, cardName})
            CXLResponseCode = CType(results(1),String)
            CXLMessage = CType(results(2),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CXLProcessingRefundAsync( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal ridAgainstInvoice As Long,  _
                    ByVal empCode As String,  _
                    ByVal cardName As String)
            Me.CXLProcessingRefundAsync(CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, hn, zp, ridAgainstInvoice, empCode, cardName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CXLProcessingRefundAsync( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal ridAgainstInvoice As Long,  _
                    ByVal empCode As String,  _
                    ByVal cardName As String,  _
                    ByVal userState As Object)
            If (Me.CXLProcessingRefundOperationCompleted Is Nothing) Then
                Me.CXLProcessingRefundOperationCompleted = AddressOf Me.OnCXLProcessingRefundOperationCompleted
            End If
            Me.InvokeAsync("CXLProcessingRefund", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, hn, zp, ridAgainstInvoice, empCode, cardName}, Me.CXLProcessingRefundOperationCompleted, userState)
        End Sub
        
        Private Sub OnCXLProcessingRefundOperationCompleted(ByVal arg As Object)
            If (Not (Me.CXLProcessingRefundCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CXLProcessingRefundCompleted(Me, New CXLProcessingRefundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="CXLProcessingRefund1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CXL/Service1/CXLProcessingRefundWithCcvUpgrade", RequestElementName:="CXLProcessingRefundWithCcvUpgrade", RequestNamespace:="http://tempuri.org/CXL/Service1", ResponseElementName:="CXLProcessingRefundWithCcvUpgradeResponse", ResponseNamespace:="http://tempuri.org/CXL/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function CXLProcessingRefund( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByRef CXLResponseCode As String,  _
                    ByRef CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal ccv As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal ridAgainstInvoice As Long,  _
                    ByVal empcode As String,  _
                    ByVal cardName As String) As <System.Xml.Serialization.XmlElementAttribute("CXLProcessingRefundWithCcvUpgradeResult")> Object
            Dim results() As Object = Me.Invoke("CXLProcessingRefund1", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, ccv, hn, zp, ridAgainstInvoice, empcode, cardName})
            CXLResponseCode = CType(results(1),String)
            CXLMessage = CType(results(2),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CXLProcessingRefund1Async( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal ccv As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal ridAgainstInvoice As Long,  _
                    ByVal empcode As String,  _
                    ByVal cardName As String)
            Me.CXLProcessingRefund1Async(CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, ccv, hn, zp, ridAgainstInvoice, empcode, cardName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CXLProcessingRefund1Async( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal ccv As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal ridAgainstInvoice As Long,  _
                    ByVal empcode As String,  _
                    ByVal cardName As String,  _
                    ByVal userState As Object)
            If (Me.CXLProcessingRefund1OperationCompleted Is Nothing) Then
                Me.CXLProcessingRefund1OperationCompleted = AddressOf Me.OnCXLProcessingRefund1OperationCompleted
            End If
            Me.InvokeAsync("CXLProcessingRefund1", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, ccv, hn, zp, ridAgainstInvoice, empcode, cardName}, Me.CXLProcessingRefund1OperationCompleted, userState)
        End Sub
        
        Private Sub OnCXLProcessingRefund1OperationCompleted(ByVal arg As Object)
            If (Not (Me.CXLProcessingRefund1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CXLProcessingRefund1Completed(Me, New CXLProcessingRefund1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CXL/Service1/CxlLiveTest", RequestElementName:="CxlLiveTest", RequestNamespace:="http://tempuri.org/CXL/Service1", ResponseElementName:="CxlLiveTestResponse", ResponseNamespace:="http://tempuri.org/CXL/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IfCXLLive() As <System.Xml.Serialization.XmlElementAttribute("CxlLiveTestResult")> String
            Dim results() As Object = Me.Invoke("IfCXLLive", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IfCXLLiveAsync()
            Me.IfCXLLiveAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IfCXLLiveAsync(ByVal userState As Object)
            If (Me.IfCXLLiveOperationCompleted Is Nothing) Then
                Me.IfCXLLiveOperationCompleted = AddressOf Me.OnIfCXLLiveOperationCompleted
            End If
            Me.InvokeAsync("IfCXLLive", New Object(-1) {}, Me.IfCXLLiveOperationCompleted, userState)
        End Sub
        
        Private Sub OnIfCXLLiveOperationCompleted(ByVal arg As Object)
            If (Not (Me.IfCXLLiveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IfCXLLiveCompleted(Me, New IfCXLLiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CXLProcessingRefundCompletedEventHandler(ByVal sender As Object, ByVal e As CXLProcessingRefundCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CXLProcessingRefundCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CXLResponseCode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CXLMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CXLProcessingRefund1CompletedEventHandler(ByVal sender As Object, ByVal e As CXLProcessingRefund1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CXLProcessingRefund1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CXLResponseCode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CXLMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub IfCXLLiveCompletedEventHandler(ByVal sender As Object, ByVal e As IfCXLLiveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IfCXLLiveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
