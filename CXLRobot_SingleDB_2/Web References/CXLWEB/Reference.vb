'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4952
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4952.
'
Namespace CXLWEB
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CXLServiceSoap", [Namespace]:="http://tempuri.org/CXL/Service1")>  _
    Partial Public Class CXLService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private CXLProcessingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CXLProcessing1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private CXLProcessing2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private CXLProcessing3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private IfCXLLiveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CXLProcessing4OperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://gateway.infinilogic.com/cxlservices.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CXLProcessingCompleted As CXLProcessingCompletedEventHandler
        
        '''<remarks/>
        Public Event CXLProcessing1Completed As CXLProcessing1CompletedEventHandler
        
        '''<remarks/>
        Public Event CXLProcessing2Completed As CXLProcessing2CompletedEventHandler
        
        '''<remarks/>
        Public Event CXLProcessing3Completed As CXLProcessing3CompletedEventHandler
        
        '''<remarks/>
        Public Event IfCXLLiveCompleted As IfCXLLiveCompletedEventHandler
        
        '''<remarks/>
        Public Event CXLProcessing4Completed As CXLProcessing4CompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CXL/Service1/CXLProcessing", RequestNamespace:="http://tempuri.org/CXL/Service1", ResponseNamespace:="http://tempuri.org/CXL/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function CXLProcessing( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByRef CXLResponseCode As String,  _
                    ByRef CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal cardName As String,  _
                    ByVal callCentre As String) As Object
            Dim results() As Object = Me.Invoke("CXLProcessing", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, cardName, callCentre})
            CXLResponseCode = CType(results(1),String)
            CXLMessage = CType(results(2),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginCXLProcessing( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal cardName As String,  _
                    ByVal callCentre As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CXLProcessing", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, cardName, callCentre}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCXLProcessing(ByVal asyncResult As System.IAsyncResult, ByRef CXLResponseCode As String, ByRef CXLMessage As String) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            CXLResponseCode = CType(results(1),String)
            CXLMessage = CType(results(2),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CXLProcessingAsync( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal cardName As String,  _
                    ByVal callCentre As String)
            Me.CXLProcessingAsync(CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, cardName, callCentre, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CXLProcessingAsync( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal cardName As String,  _
                    ByVal callCentre As String,  _
                    ByVal userState As Object)
            If (Me.CXLProcessingOperationCompleted Is Nothing) Then
                Me.CXLProcessingOperationCompleted = AddressOf Me.OnCXLProcessingOperationCompleted
            End If
            Me.InvokeAsync("CXLProcessing", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, cardName, callCentre}, Me.CXLProcessingOperationCompleted, userState)
        End Sub
        
        Private Sub OnCXLProcessingOperationCompleted(ByVal arg As Object)
            If (Not (Me.CXLProcessingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CXLProcessingCompleted(Me, New CXLProcessingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="CXLProcessing1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CXL/Service1/CXLProcessingUpgrade", RequestElementName:="CXLProcessingUpgrade", RequestNamespace:="http://tempuri.org/CXL/Service1", ResponseElementName:="CXLProcessingUpgradeResponse", ResponseNamespace:="http://tempuri.org/CXL/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function CXLProcessing( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByRef CXLResponseCode As String,  _
                    ByRef CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal cardname As String,  _
                    ByVal callCentre As String) As <System.Xml.Serialization.XmlElementAttribute("CXLProcessingUpgradeResult")> Object
            Dim results() As Object = Me.Invoke("CXLProcessing1", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, hn, zp, cardname, callCentre})
            CXLResponseCode = CType(results(1),String)
            CXLMessage = CType(results(2),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginCXLProcessing1( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal cardname As String,  _
                    ByVal callCentre As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CXLProcessing1", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, hn, zp, cardname, callCentre}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCXLProcessing1(ByVal asyncResult As System.IAsyncResult, ByRef CXLResponseCode As String, ByRef CXLMessage As String) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            CXLResponseCode = CType(results(1),String)
            CXLMessage = CType(results(2),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CXLProcessing1Async( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal cardname As String,  _
                    ByVal callCentre As String)
            Me.CXLProcessing1Async(CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, hn, zp, cardname, callCentre, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CXLProcessing1Async( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal cardname As String,  _
                    ByVal callCentre As String,  _
                    ByVal userState As Object)
            If (Me.CXLProcessing1OperationCompleted Is Nothing) Then
                Me.CXLProcessing1OperationCompleted = AddressOf Me.OnCXLProcessing1OperationCompleted
            End If
            Me.InvokeAsync("CXLProcessing1", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, hn, zp, cardname, callCentre}, Me.CXLProcessing1OperationCompleted, userState)
        End Sub
        
        Private Sub OnCXLProcessing1OperationCompleted(ByVal arg As Object)
            If (Not (Me.CXLProcessing1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CXLProcessing1Completed(Me, New CXLProcessing1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="CXLProcessing2"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CXL/Service1/CXLProcessingWithCcv", RequestElementName:="CXLProcessingWithCcv", RequestNamespace:="http://tempuri.org/CXL/Service1", ResponseElementName:="CXLProcessingWithCcvResponse", ResponseNamespace:="http://tempuri.org/CXL/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function CXLProcessing( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByRef CXLResponseCode As String,  _
                    ByRef CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal ccv As String,  _
                    ByVal cardname As String,  _
                    ByVal callCentre As String) As <System.Xml.Serialization.XmlElementAttribute("CXLProcessingWithCcvResult")> Object
            Dim results() As Object = Me.Invoke("CXLProcessing2", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, ccv, cardname, callCentre})
            CXLResponseCode = CType(results(1),String)
            CXLMessage = CType(results(2),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginCXLProcessing2( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal ccv As String,  _
                    ByVal cardname As String,  _
                    ByVal callCentre As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CXLProcessing2", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, ccv, cardname, callCentre}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCXLProcessing2(ByVal asyncResult As System.IAsyncResult, ByRef CXLResponseCode As String, ByRef CXLMessage As String) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            CXLResponseCode = CType(results(1),String)
            CXLMessage = CType(results(2),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CXLProcessing2Async( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal ccv As String,  _
                    ByVal cardname As String,  _
                    ByVal callCentre As String)
            Me.CXLProcessing2Async(CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, ccv, cardname, callCentre, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CXLProcessing2Async( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal ccv As String,  _
                    ByVal cardname As String,  _
                    ByVal callCentre As String,  _
                    ByVal userState As Object)
            If (Me.CXLProcessing2OperationCompleted Is Nothing) Then
                Me.CXLProcessing2OperationCompleted = AddressOf Me.OnCXLProcessing2OperationCompleted
            End If
            Me.InvokeAsync("CXLProcessing2", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, ccv, cardname, callCentre}, Me.CXLProcessing2OperationCompleted, userState)
        End Sub
        
        Private Sub OnCXLProcessing2OperationCompleted(ByVal arg As Object)
            If (Not (Me.CXLProcessing2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CXLProcessing2Completed(Me, New CXLProcessing2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="CXLProcessing3"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CXL/Service1/CXLProcessingWithCcvUpgrade", RequestElementName:="CXLProcessingWithCcvUpgrade", RequestNamespace:="http://tempuri.org/CXL/Service1", ResponseElementName:="CXLProcessingWithCcvUpgradeResponse", ResponseNamespace:="http://tempuri.org/CXL/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function CXLProcessing( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByRef CXLResponseCode As String,  _
                    ByRef CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal ccv As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal cardname As String,  _
                    ByVal callCentre As String) As <System.Xml.Serialization.XmlElementAttribute("CXLProcessingWithCcvUpgradeResult")> Object
            Dim results() As Object = Me.Invoke("CXLProcessing3", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, ccv, hn, zp, cardname, callCentre})
            CXLResponseCode = CType(results(1),String)
            CXLMessage = CType(results(2),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginCXLProcessing3( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal ccv As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal cardname As String,  _
                    ByVal callCentre As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CXLProcessing3", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, ccv, hn, zp, cardname, callCentre}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCXLProcessing3(ByVal asyncResult As System.IAsyncResult, ByRef CXLResponseCode As String, ByRef CXLMessage As String) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            CXLResponseCode = CType(results(1),String)
            CXLMessage = CType(results(2),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CXLProcessing3Async( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal ccv As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal cardname As String,  _
                    ByVal callCentre As String)
            Me.CXLProcessing3Async(CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, ccv, hn, zp, cardname, callCentre, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CXLProcessing3Async( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal ccv As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal cardname As String,  _
                    ByVal callCentre As String,  _
                    ByVal userState As Object)
            If (Me.CXLProcessing3OperationCompleted Is Nothing) Then
                Me.CXLProcessing3OperationCompleted = AddressOf Me.OnCXLProcessing3OperationCompleted
            End If
            Me.InvokeAsync("CXLProcessing3", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, ccv, hn, zp, cardname, callCentre}, Me.CXLProcessing3OperationCompleted, userState)
        End Sub
        
        Private Sub OnCXLProcessing3OperationCompleted(ByVal arg As Object)
            If (Not (Me.CXLProcessing3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CXLProcessing3Completed(Me, New CXLProcessing3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CXL/Service1/CxlLiveTest", RequestElementName:="CxlLiveTest", RequestNamespace:="http://tempuri.org/CXL/Service1", ResponseElementName:="CxlLiveTestResponse", ResponseNamespace:="http://tempuri.org/CXL/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IfCXLLive() As <System.Xml.Serialization.XmlElementAttribute("CxlLiveTestResult")> String
            Dim results() As Object = Me.Invoke("IfCXLLive", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginIfCXLLive(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("IfCXLLive", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndIfCXLLive(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IfCXLLiveAsync()
            Me.IfCXLLiveAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IfCXLLiveAsync(ByVal userState As Object)
            If (Me.IfCXLLiveOperationCompleted Is Nothing) Then
                Me.IfCXLLiveOperationCompleted = AddressOf Me.OnIfCXLLiveOperationCompleted
            End If
            Me.InvokeAsync("IfCXLLive", New Object(-1) {}, Me.IfCXLLiveOperationCompleted, userState)
        End Sub
        
        Private Sub OnIfCXLLiveOperationCompleted(ByVal arg As Object)
            If (Not (Me.IfCXLLiveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IfCXLLiveCompleted(Me, New IfCXLLiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="CXLProcessing4"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CXL/Service1/CXLProcessingWith3dsecure", RequestElementName:="CXLProcessingWith3dsecure", RequestNamespace:="http://tempuri.org/CXL/Service1", ResponseElementName:="CXLProcessingWith3dsecureResponse", ResponseNamespace:="http://tempuri.org/CXL/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function CXLProcessing( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByRef CXLResponseCode As String,  _
                    ByRef CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal ccv As String,  _
                    ByVal eci As String,  _
                    ByVal sid As String,  _
                    ByVal vts As String,  _
                    ByVal vav As String,  _
                    ByVal threeid As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal cardname As String) As <System.Xml.Serialization.XmlElementAttribute("CXLProcessingWith3dsecureResult")> Object
            Dim results() As Object = Me.Invoke("CXLProcessing4", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, ccv, eci, sid, vts, vav, threeid, hn, zp, cardname})
            CXLResponseCode = CType(results(1),String)
            CXLMessage = CType(results(2),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginCXLProcessing4( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal ccv As String,  _
                    ByVal eci As String,  _
                    ByVal sid As String,  _
                    ByVal vts As String,  _
                    ByVal vav As String,  _
                    ByVal threeid As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal cardname As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CXLProcessing4", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, ccv, eci, sid, vts, vav, threeid, hn, zp, cardname}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCXLProcessing4(ByVal asyncResult As System.IAsyncResult, ByRef CXLResponseCode As String, ByRef CXLMessage As String) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            CXLResponseCode = CType(results(1),String)
            CXLMessage = CType(results(2),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CXLProcessing4Async( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal ccv As String,  _
                    ByVal eci As String,  _
                    ByVal sid As String,  _
                    ByVal vts As String,  _
                    ByVal vav As String,  _
                    ByVal threeid As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal cardname As String)
            Me.CXLProcessing4Async(CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, ccv, eci, sid, vts, vav, threeid, hn, zp, cardname, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CXLProcessing4Async( _
                    ByVal CreditCardNO As String,  _
                    ByVal IssueNumber As String,  _
                    ByVal TransactionAmount As String,  _
                    ByVal GCode As String,  _
                    ByVal MerchantId As String,  _
                    ByVal CID As String,  _
                    ByVal OrderID As String,  _
                    ByVal TransactionType As String,  _
                    ByVal StartDate As String,  _
                    ByVal CardExpiry As String,  _
                    ByVal CardType As String,  _
                    ByVal Mode As String,  _
                    ByVal CXLResponseCode As String,  _
                    ByVal CXLMessage As String,  _
                    ByVal agentName As String,  _
                    ByVal agentAcquirer As String,  _
                    ByVal rid As Long,  _
                    ByVal merchantloginid As String,  _
                    ByVal customerloginid As String,  _
                    ByVal sender As String,  _
                    ByVal ccv As String,  _
                    ByVal eci As String,  _
                    ByVal sid As String,  _
                    ByVal vts As String,  _
                    ByVal vav As String,  _
                    ByVal threeid As String,  _
                    ByVal hn As String,  _
                    ByVal zp As String,  _
                    ByVal cardname As String,  _
                    ByVal userState As Object)
            If (Me.CXLProcessing4OperationCompleted Is Nothing) Then
                Me.CXLProcessing4OperationCompleted = AddressOf Me.OnCXLProcessing4OperationCompleted
            End If
            Me.InvokeAsync("CXLProcessing4", New Object() {CreditCardNO, IssueNumber, TransactionAmount, GCode, MerchantId, CID, OrderID, TransactionType, StartDate, CardExpiry, CardType, Mode, CXLResponseCode, CXLMessage, agentName, agentAcquirer, rid, merchantloginid, customerloginid, sender, ccv, eci, sid, vts, vav, threeid, hn, zp, cardname}, Me.CXLProcessing4OperationCompleted, userState)
        End Sub
        
        Private Sub OnCXLProcessing4OperationCompleted(ByVal arg As Object)
            If (Not (Me.CXLProcessing4CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CXLProcessing4Completed(Me, New CXLProcessing4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub CXLProcessingCompletedEventHandler(ByVal sender As Object, ByVal e As CXLProcessingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CXLProcessingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CXLResponseCode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CXLMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub CXLProcessing1CompletedEventHandler(ByVal sender As Object, ByVal e As CXLProcessing1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CXLProcessing1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CXLResponseCode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CXLMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub CXLProcessing2CompletedEventHandler(ByVal sender As Object, ByVal e As CXLProcessing2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CXLProcessing2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CXLResponseCode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CXLMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub CXLProcessing3CompletedEventHandler(ByVal sender As Object, ByVal e As CXLProcessing3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CXLProcessing3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CXLResponseCode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CXLMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub IfCXLLiveCompletedEventHandler(ByVal sender As Object, ByVal e As IfCXLLiveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IfCXLLiveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub CXLProcessing4CompletedEventHandler(ByVal sender As Object, ByVal e As CXLProcessing4CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CXLProcessing4CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CXLResponseCode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CXLMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
End Namespace
