'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4952
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4952.
'
Namespace InfiniPayPal
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="InfiniPayPalWebServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class InfiniPayPalWebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private MakeTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InstallCertificateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ISCertInstalledOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://paypalgate.infinishops.com/InfiniPayPalWebService.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event MakeTransactionCompleted As MakeTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event InstallCertificateCompleted As InstallCertificateCompletedEventHandler
        
        '''<remarks/>
        Public Event ISCertInstalledCompleted As ISCertInstalledCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MakeTransaction", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MakeTransaction(ByVal paypaID As String, ByVal paypalPassword As String, ByVal Envoirement As String, ByVal cardNumber As String, ByVal cardType As Integer, ByVal CVV2 As String, ByVal endMonth As String, ByVal endYear As String, ByVal totalAmount As String, ByVal moneyType As String, ByVal invoiceID As String, ByRef code As String, ByRef msg As String) As String
            Dim results() As Object = Me.Invoke("MakeTransaction", New Object() {paypaID, paypalPassword, Envoirement, cardNumber, cardType, CVV2, endMonth, endYear, totalAmount, moneyType, invoiceID, code, msg})
            code = CType(results(1),String)
            msg = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginMakeTransaction(ByVal paypaID As String, ByVal paypalPassword As String, ByVal Envoirement As String, ByVal cardNumber As String, ByVal cardType As Integer, ByVal CVV2 As String, ByVal endMonth As String, ByVal endYear As String, ByVal totalAmount As String, ByVal moneyType As String, ByVal invoiceID As String, ByVal code As String, ByVal msg As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("MakeTransaction", New Object() {paypaID, paypalPassword, Envoirement, cardNumber, cardType, CVV2, endMonth, endYear, totalAmount, moneyType, invoiceID, code, msg}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndMakeTransaction(ByVal asyncResult As System.IAsyncResult, ByRef code As String, ByRef msg As String) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            code = CType(results(1),String)
            msg = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MakeTransactionAsync(ByVal paypaID As String, ByVal paypalPassword As String, ByVal Envoirement As String, ByVal cardNumber As String, ByVal cardType As Integer, ByVal CVV2 As String, ByVal endMonth As String, ByVal endYear As String, ByVal totalAmount As String, ByVal moneyType As String, ByVal invoiceID As String, ByVal code As String, ByVal msg As String)
            Me.MakeTransactionAsync(paypaID, paypalPassword, Envoirement, cardNumber, cardType, CVV2, endMonth, endYear, totalAmount, moneyType, invoiceID, code, msg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MakeTransactionAsync(ByVal paypaID As String, ByVal paypalPassword As String, ByVal Envoirement As String, ByVal cardNumber As String, ByVal cardType As Integer, ByVal CVV2 As String, ByVal endMonth As String, ByVal endYear As String, ByVal totalAmount As String, ByVal moneyType As String, ByVal invoiceID As String, ByVal code As String, ByVal msg As String, ByVal userState As Object)
            If (Me.MakeTransactionOperationCompleted Is Nothing) Then
                Me.MakeTransactionOperationCompleted = AddressOf Me.OnMakeTransactionOperationCompleted
            End If
            Me.InvokeAsync("MakeTransaction", New Object() {paypaID, paypalPassword, Envoirement, cardNumber, cardType, CVV2, endMonth, endYear, totalAmount, moneyType, invoiceID, code, msg}, Me.MakeTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnMakeTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.MakeTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MakeTransactionCompleted(Me, New MakeTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InstallCertificate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InstallCertificate(ByVal MIDentity As String, ByVal password As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Certificate() As Byte) As String
            Dim results() As Object = Me.Invoke("InstallCertificate", New Object() {MIDentity, password, Certificate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginInstallCertificate(ByVal MIDentity As String, ByVal password As String, ByVal Certificate() As Byte, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("InstallCertificate", New Object() {MIDentity, password, Certificate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndInstallCertificate(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InstallCertificateAsync(ByVal MIDentity As String, ByVal password As String, ByVal Certificate() As Byte)
            Me.InstallCertificateAsync(MIDentity, password, Certificate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InstallCertificateAsync(ByVal MIDentity As String, ByVal password As String, ByVal Certificate() As Byte, ByVal userState As Object)
            If (Me.InstallCertificateOperationCompleted Is Nothing) Then
                Me.InstallCertificateOperationCompleted = AddressOf Me.OnInstallCertificateOperationCompleted
            End If
            Me.InvokeAsync("InstallCertificate", New Object() {MIDentity, password, Certificate}, Me.InstallCertificateOperationCompleted, userState)
        End Sub
        
        Private Sub OnInstallCertificateOperationCompleted(ByVal arg As Object)
            If (Not (Me.InstallCertificateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InstallCertificateCompleted(Me, New InstallCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsCertificatInstalled", RequestElementName:="IsCertificatInstalled", RequestNamespace:="http://tempuri.org/", ResponseElementName:="IsCertificatInstalledResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ISCertInstalled(ByVal paypaID As String, ByVal paypalPassword As String, ByVal Envoirement As String) As <System.Xml.Serialization.XmlElementAttribute("IsCertificatInstalledResult")> Integer
            Dim results() As Object = Me.Invoke("ISCertInstalled", New Object() {paypaID, paypalPassword, Envoirement})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginISCertInstalled(ByVal paypaID As String, ByVal paypalPassword As String, ByVal Envoirement As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ISCertInstalled", New Object() {paypaID, paypalPassword, Envoirement}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndISCertInstalled(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ISCertInstalledAsync(ByVal paypaID As String, ByVal paypalPassword As String, ByVal Envoirement As String)
            Me.ISCertInstalledAsync(paypaID, paypalPassword, Envoirement, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ISCertInstalledAsync(ByVal paypaID As String, ByVal paypalPassword As String, ByVal Envoirement As String, ByVal userState As Object)
            If (Me.ISCertInstalledOperationCompleted Is Nothing) Then
                Me.ISCertInstalledOperationCompleted = AddressOf Me.OnISCertInstalledOperationCompleted
            End If
            Me.InvokeAsync("ISCertInstalled", New Object() {paypaID, paypalPassword, Envoirement}, Me.ISCertInstalledOperationCompleted, userState)
        End Sub
        
        Private Sub OnISCertInstalledOperationCompleted(ByVal arg As Object)
            If (Not (Me.ISCertInstalledCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ISCertInstalledCompleted(Me, New ISCertInstalledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub MakeTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As MakeTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MakeTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property code() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub InstallCertificateCompletedEventHandler(ByVal sender As Object, ByVal e As InstallCertificateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InstallCertificateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub ISCertInstalledCompletedEventHandler(ByVal sender As Object, ByVal e As ISCertInstalledCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ISCertInstalledCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
End Namespace
